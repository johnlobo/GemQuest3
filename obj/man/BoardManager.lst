                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Mac OS X x86_64)
                              4 ;--------------------------------------------------------
                              5 	.module BoardManager
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _man_board_render
                             12 	.globl _man_board_update
                             13 	.globl _man_board_init
                             14 	.globl _man_board_create
                             15 	.globl _cpct_getRandom_mxor_u8
                             16 	.globl _cpct_getScreenPtr
                             17 	.globl _cpct_drawSolidBox
                             18 	.globl _cpct_drawSpriteBlended
                             19 	.globl _board
                             20 	.globl _tiles
                             21 ;--------------------------------------------------------
                             22 ; special function registers
                             23 ;--------------------------------------------------------
                             24 ;--------------------------------------------------------
                             25 ; ram data
                             26 ;--------------------------------------------------------
                             27 	.area _DATA
   0000                      28 _board::
   0000                      29 	.ds 153
                             30 ;--------------------------------------------------------
                             31 ; ram data
                             32 ;--------------------------------------------------------
                             33 	.area _INITIALIZED
                             34 ;--------------------------------------------------------
                             35 ; absolute external ram data
                             36 ;--------------------------------------------------------
                             37 	.area _DABS (ABS)
                             38 ;--------------------------------------------------------
                             39 ; global & static initialisations
                             40 ;--------------------------------------------------------
                             41 	.area _HOME
                             42 	.area _GSINIT
                             43 	.area _GSFINAL
                             44 	.area _GSINIT
                             45 ;--------------------------------------------------------
                             46 ; Home
                             47 ;--------------------------------------------------------
                             48 	.area _HOME
                             49 	.area _HOME
                             50 ;--------------------------------------------------------
                             51 ; code
                             52 ;--------------------------------------------------------
                             53 	.area _CODE
                             54 ;src/man/BoardManager.c:18: void man_board_create(){
                             55 ;	---------------------------------
                             56 ; Function man_board_create
                             57 ; ---------------------------------
   0000                      58 _man_board_create::
                             59 ;src/man/BoardManager.c:21: for (j=0; j<12; j++){
   0000 0E 00         [ 7]   60 	ld	c, #0x00
                             61 ;src/man/BoardManager.c:22: for (i=0; i<12; i++){
   0002                      62 00109$:
   0002 69            [ 4]   63 	ld	l, c
   0003 29            [11]   64 	add	hl, hl
   0004 09            [11]   65 	add	hl, bc
   0005 29            [11]   66 	add	hl, hl
   0006 29            [11]   67 	add	hl, hl
   0007 3Er00         [ 7]   68 	ld	a, #<(_board)
   0009 85            [ 4]   69 	add	a, l
   000A 5F            [ 4]   70 	ld	e, a
   000B 3Es00         [ 7]   71 	ld	a, #>(_board)
   000D CE 00         [ 7]   72 	adc	a, #0x00
   000F 57            [ 4]   73 	ld	d, a
   0010 06 00         [ 7]   74 	ld	b, #0x00
   0012                      75 00103$:
                             76 ;src/man/BoardManager.c:23: board.cells[j][i] = 255;
   0012 68            [ 4]   77 	ld	l,b
   0013 26 00         [ 7]   78 	ld	h,#0x00
   0015 19            [11]   79 	add	hl, de
   0016 36 FF         [10]   80 	ld	(hl), #0xff
                             81 ;src/man/BoardManager.c:22: for (i=0; i<12; i++){
   0018 04            [ 4]   82 	inc	b
   0019 78            [ 4]   83 	ld	a, b
   001A D6 0C         [ 7]   84 	sub	a, #0x0c
   001C 38 F4         [12]   85 	jr	C,00103$
                             86 ;src/man/BoardManager.c:21: for (j=0; j<12; j++){
   001E 0C            [ 4]   87 	inc	c
   001F 79            [ 4]   88 	ld	a, c
   0020 D6 0C         [ 7]   89 	sub	a, #0x0c
   0022 38 DE         [12]   90 	jr	C,00109$
   0024 C9            [10]   91 	ret
   0025                      92 _tiles:
   0025r00r00                93 	.dw _sp_tiles_0
   0027r00r00                94 	.dw _sp_tiles_1
   0029r00r00                95 	.dw _sp_tiles_2
   002Br00r00                96 	.dw _sp_tiles_3
   002Dr00r00                97 	.dw _sp_tiles_4
   002Fr00r00                98 	.dw _sp_tiles_5
   0031r00r00                99 	.dw _sp_tiles_6
   0033r00r00               100 	.dw _sp_tiles_7
   0035r00r00               101 	.dw _sp_tiles_8
                            102 ;src/man/BoardManager.c:34: void man_board_init(u8 x, u8 y, u8 width, u8 height){
                            103 ;	---------------------------------
                            104 ; Function man_board_init
                            105 ; ---------------------------------
   0037                     106 _man_board_init::
   0037 DD E5         [15]  107 	push	ix
   0039 DD 21 00 00   [14]  108 	ld	ix,#0
   003D DD 39         [15]  109 	add	ix,sp
   003F F5            [11]  110 	push	af
   0040 F5            [11]  111 	push	af
                            112 ;src/man/BoardManager.c:37: board.width = width;
   0041 01r90r00      [10]  113 	ld	bc, #_board + 144
   0044 DD 7E 06      [19]  114 	ld	a, 6 (ix)
   0047 02            [ 7]  115 	ld	(bc), a
                            116 ;src/man/BoardManager.c:38: board.height = height;
   0048 21r91r00      [10]  117 	ld	hl, #(_board + 0x0091)
   004B DD 7E 07      [19]  118 	ld	a, 7 (ix)
   004E 77            [ 7]  119 	ld	(hl), a
                            120 ;src/man/BoardManager.c:39: board.x = x;
   004F 21r92r00      [10]  121 	ld	hl, #(_board + 0x0092)
   0052 DD 7E 04      [19]  122 	ld	a, 4 (ix)
   0055 77            [ 7]  123 	ld	(hl), a
                            124 ;src/man/BoardManager.c:40: board.y = y;
   0056 21r93r00      [10]  125 	ld	hl, #(_board + 0x0093)
   0059 DD 7E 05      [19]  126 	ld	a, 5 (ix)
   005C 77            [ 7]  127 	ld	(hl), a
                            128 ;src/man/BoardManager.c:41: board.activeCell.active = 0;
   005D 21r97r00      [10]  129 	ld	hl, #(_board + 0x0097)
   0060 36 00         [10]  130 	ld	(hl), #0x00
                            131 ;src/man/BoardManager.c:43: for (j=0; j<board.width; j++){
   0062 16 00         [ 7]  132 	ld	d, #0x00
   0064                     133 00107$:
   0064 0A            [ 7]  134 	ld	a, (bc)
   0065 5F            [ 4]  135 	ld	e, a
   0066 7A            [ 4]  136 	ld	a, d
   0067 93            [ 4]  137 	sub	a, e
   0068 30 4D         [12]  138 	jr	NC,00109$
                            139 ;src/man/BoardManager.c:44: for (i=0; i<board.height; i++){
   006A 6A            [ 4]  140 	ld	l, d
   006B 5D            [ 4]  141 	ld	e, l
   006C 29            [11]  142 	add	hl, hl
   006D 19            [11]  143 	add	hl, de
   006E 29            [11]  144 	add	hl, hl
   006F 29            [11]  145 	add	hl, hl
   0070 3Er00         [ 7]  146 	ld	a, #<(_board)
   0072 85            [ 4]  147 	add	a, l
   0073 DD 77 FE      [19]  148 	ld	-2 (ix), a
   0076 3Es00         [ 7]  149 	ld	a, #>(_board)
   0078 CE 00         [ 7]  150 	adc	a, #0x00
   007A DD 77 FF      [19]  151 	ld	-1 (ix), a
   007D 1E 00         [ 7]  152 	ld	e, #0x00
   007F                     153 00104$:
   007F 21r91r00      [10]  154 	ld	hl, #(_board + 0x0091) + 0
   0082 6E            [ 7]  155 	ld	l, (hl)
   0083 7B            [ 4]  156 	ld	a, e
   0084 95            [ 4]  157 	sub	a, l
   0085 30 28         [12]  158 	jr	NC,00101$
                            159 ;src/man/BoardManager.c:45: board.cells[j][i] = (cpct_rand8() % NUM_COLORS);
   0087 DD 7E FE      [19]  160 	ld	a, -2 (ix)
   008A 83            [ 4]  161 	add	a, e
   008B DD 77 FC      [19]  162 	ld	-4 (ix), a
   008E DD 7E FF      [19]  163 	ld	a, -1 (ix)
   0091 CE 00         [ 7]  164 	adc	a, #0x00
   0093 DD 77 FD      [19]  165 	ld	-3 (ix), a
   0096 C5            [11]  166 	push	bc
   0097 D5            [11]  167 	push	de
   0098 CDr00r00      [17]  168 	call	_cpct_getRandom_mxor_u8
   009B 65            [ 4]  169 	ld	h, l
   009C 3E 06         [ 7]  170 	ld	a, #0x06
   009E F5            [11]  171 	push	af
   009F 33            [ 6]  172 	inc	sp
   00A0 E5            [11]  173 	push	hl
   00A1 33            [ 6]  174 	inc	sp
   00A2 CDr00r00      [17]  175 	call	__moduchar
   00A5 F1            [10]  176 	pop	af
   00A6 7D            [ 4]  177 	ld	a, l
   00A7 D1            [10]  178 	pop	de
   00A8 C1            [10]  179 	pop	bc
   00A9 E1            [10]  180 	pop	hl
   00AA E5            [11]  181 	push	hl
   00AB 77            [ 7]  182 	ld	(hl), a
                            183 ;src/man/BoardManager.c:44: for (i=0; i<board.height; i++){
   00AC 1C            [ 4]  184 	inc	e
   00AD 18 D0         [12]  185 	jr	00104$
   00AF                     186 00101$:
                            187 ;src/man/BoardManager.c:47: board.updated = YES;
   00AF 21r98r00      [10]  188 	ld	hl, #(_board + 0x0098)
   00B2 36 01         [10]  189 	ld	(hl), #0x01
                            190 ;src/man/BoardManager.c:43: for (j=0; j<board.width; j++){
   00B4 14            [ 4]  191 	inc	d
   00B5 18 AD         [12]  192 	jr	00107$
   00B7                     193 00109$:
   00B7 DD F9         [10]  194 	ld	sp, ix
   00B9 DD E1         [14]  195 	pop	ix
   00BB C9            [10]  196 	ret
                            197 ;src/man/BoardManager.c:60: void man_board_update(){
                            198 ;	---------------------------------
                            199 ; Function man_board_update
                            200 ; ---------------------------------
   00BC                     201 _man_board_update::
                            202 ;src/man/BoardManager.c:62: }
   00BC C9            [10]  203 	ret
                            204 ;src/man/BoardManager.c:70: void man_board_render(){
                            205 ;	---------------------------------
                            206 ; Function man_board_render
                            207 ; ---------------------------------
   00BD                     208 _man_board_render::
   00BD DD E5         [15]  209 	push	ix
   00BF DD 21 00 00   [14]  210 	ld	ix,#0
   00C3 DD 39         [15]  211 	add	ix,sp
   00C5 F5            [11]  212 	push	af
   00C6 F5            [11]  213 	push	af
   00C7 3B            [ 6]  214 	dec	sp
                            215 ;src/man/BoardManager.c:73: if (board.updated = YES){
   00C8 01r98r00      [10]  216 	ld	bc, #_board + 152
   00CB 3E 01         [ 7]  217 	ld	a, #0x01
   00CD 02            [ 7]  218 	ld	(bc), a
                            219 ;src/man/BoardManager.c:74: for (j=0; j<board.height; j++){
   00CE 1E 00         [ 7]  220 	ld	e, #0x00
   00D0                     221 00112$:
   00D0 21r91r00      [10]  222 	ld	hl, #_board + 145
   00D3 56            [ 7]  223 	ld	d, (hl)
   00D4 7B            [ 4]  224 	ld	a, e
   00D5 92            [ 4]  225 	sub	a, d
   00D6 D2r7Cr01      [10]  226 	jp	NC, 00105$
                            227 ;src/man/BoardManager.c:75: for (i=0; i<board.width; i++){
   00D9 D5            [11]  228 	push	de
   00DA 7B            [ 4]  229 	ld	a, e
   00DB 87            [ 4]  230 	add	a, a
   00DC 83            [ 4]  231 	add	a, e
   00DD 87            [ 4]  232 	add	a, a
   00DE 87            [ 4]  233 	add	a, a
   00DF 83            [ 4]  234 	add	a, e
   00E0 D1            [10]  235 	pop	de
   00E1 DD 77 FD      [19]  236 	ld	-3 (ix), a
   00E4 D5            [11]  237 	push	de
   00E5 6B            [ 4]  238 	ld	l, e
   00E6 29            [11]  239 	add	hl, hl
   00E7 19            [11]  240 	add	hl, de
   00E8 29            [11]  241 	add	hl, hl
   00E9 29            [11]  242 	add	hl, hl
   00EA D1            [10]  243 	pop	de
   00EB 3Er00         [ 7]  244 	ld	a, #<(_board)
   00ED 85            [ 4]  245 	add	a, l
   00EE DD 77 FE      [19]  246 	ld	-2 (ix), a
   00F1 3Es00         [ 7]  247 	ld	a, #>(_board)
   00F3 CE 00         [ 7]  248 	adc	a, #0x00
   00F5 DD 77 FF      [19]  249 	ld	-1 (ix), a
   00F8 16 00         [ 7]  250 	ld	d, #0x00
   00FA                     251 00109$:
   00FA 21r90r00      [10]  252 	ld	hl, #_board + 144
   00FD 6E            [ 7]  253 	ld	l, (hl)
   00FE 7A            [ 4]  254 	ld	a, d
   00FF 95            [ 4]  255 	sub	a, l
   0100 30 76         [12]  256 	jr	NC,00113$
                            257 ;src/man/BoardManager.c:76: vmem = cpct_getScreenPtr (CPCT_VMEM_START, board.x + (i*5), board.y + (j*13));
   0102 3Ar93r00      [13]  258 	ld	a,(#_board + 147)
   0105 DD 86 FD      [19]  259 	add	a, -3 (ix)
   0108 DD 77 FC      [19]  260 	ld	-4 (ix), a
   010B 21r92r00      [10]  261 	ld	hl, #_board + 146
   010E 7E            [ 7]  262 	ld	a, (hl)
   010F DD 77 FB      [19]  263 	ld	-5 (ix), a
   0112 D5            [11]  264 	push	de
   0113 6A            [ 4]  265 	ld	l, d
   0114 5D            [ 4]  266 	ld	e, l
   0115 29            [11]  267 	add	hl, hl
   0116 29            [11]  268 	add	hl, hl
   0117 19            [11]  269 	add	hl, de
   0118 D1            [10]  270 	pop	de
   0119 DD 7E FB      [19]  271 	ld	a, -5 (ix)
   011C 85            [ 4]  272 	add	a, l
   011D DD 77 FB      [19]  273 	ld	-5 (ix), a
   0120 C5            [11]  274 	push	bc
   0121 D5            [11]  275 	push	de
   0122 DD 66 FC      [19]  276 	ld	h, -4 (ix)
   0125 DD 6E FB      [19]  277 	ld	l, -5 (ix)
   0128 E5            [11]  278 	push	hl
   0129 21 00 C0      [10]  279 	ld	hl, #0xc000
   012C E5            [11]  280 	push	hl
   012D CDr00r00      [17]  281 	call	_cpct_getScreenPtr
   0130 D1            [10]  282 	pop	de
   0131 C1            [10]  283 	pop	bc
   0132 E5            [11]  284 	push	hl
   0133 FD E1         [14]  285 	pop	iy
                            286 ;src/man/BoardManager.c:78: if (board.cells[j][i]!=255){
   0135 DD 7E FE      [19]  287 	ld	a, -2 (ix)
   0138 82            [ 4]  288 	add	a, d
   0139 6F            [ 4]  289 	ld	l, a
   013A DD 7E FF      [19]  290 	ld	a, -1 (ix)
   013D CE 00         [ 7]  291 	adc	a, #0x00
   013F 67            [ 4]  292 	ld	h, a
   0140 6E            [ 7]  293 	ld	l, (hl)
                            294 ;src/man/BoardManager.c:79: cpct_drawSpriteBlended(vmem, SP_TILES_0_H, SP_TILES_0_W, tiles[board.cells[j][i]]); // Faster Sprites with XOR
                            295 ;src/man/BoardManager.c:78: if (board.cells[j][i]!=255){
   0141 7D            [ 4]  296 	ld	a, l
   0142 3C            [ 4]  297 	inc	a
   0143 28 1F         [12]  298 	jr	Z,00102$
                            299 ;src/man/BoardManager.c:79: cpct_drawSpriteBlended(vmem, SP_TILES_0_H, SP_TILES_0_W, tiles[board.cells[j][i]]); // Faster Sprites with XOR
   0145 26 00         [ 7]  300 	ld	h, #0x00
   0147 29            [11]  301 	add	hl, hl
   0148 3Er25         [ 7]  302 	ld	a, #<(_tiles)
   014A 85            [ 4]  303 	add	a, l
   014B 6F            [ 4]  304 	ld	l, a
   014C 3Es00         [ 7]  305 	ld	a, #>(_tiles)
   014E 8C            [ 4]  306 	adc	a, h
   014F 67            [ 4]  307 	ld	h, a
   0150 7E            [ 7]  308 	ld	a, (hl)
   0151 23            [ 6]  309 	inc	hl
   0152 66            [ 7]  310 	ld	h, (hl)
   0153 6F            [ 4]  311 	ld	l, a
   0154 C5            [11]  312 	push	bc
   0155 D5            [11]  313 	push	de
   0156 E5            [11]  314 	push	hl
   0157 21 0C 04      [10]  315 	ld	hl, #0x040c
   015A E5            [11]  316 	push	hl
   015B FD E5         [15]  317 	push	iy
   015D CDr00r00      [17]  318 	call	_cpct_drawSpriteBlended
   0160 D1            [10]  319 	pop	de
   0161 C1            [10]  320 	pop	bc
   0162 18 10         [12]  321 	jr	00110$
   0164                     322 00102$:
                            323 ;src/man/BoardManager.c:81: cpct_drawSolidBox (vmem, 0, SP_TILES_0_W, SP_TILES_0_H);	
   0164 C5            [11]  324 	push	bc
   0165 D5            [11]  325 	push	de
   0166 21 04 0C      [10]  326 	ld	hl, #0x0c04
   0169 E5            [11]  327 	push	hl
   016A AF            [ 4]  328 	xor	a, a
   016B F5            [11]  329 	push	af
   016C 33            [ 6]  330 	inc	sp
   016D FD E5         [15]  331 	push	iy
   016F CDr00r00      [17]  332 	call	_cpct_drawSolidBox
   0172 D1            [10]  333 	pop	de
   0173 C1            [10]  334 	pop	bc
   0174                     335 00110$:
                            336 ;src/man/BoardManager.c:75: for (i=0; i<board.width; i++){
   0174 14            [ 4]  337 	inc	d
   0175 C3rFAr00      [10]  338 	jp	00109$
   0178                     339 00113$:
                            340 ;src/man/BoardManager.c:74: for (j=0; j<board.height; j++){
   0178 1C            [ 4]  341 	inc	e
   0179 C3rD0r00      [10]  342 	jp	00112$
   017C                     343 00105$:
                            344 ;src/man/BoardManager.c:85: board.updated = NO;
   017C AF            [ 4]  345 	xor	a, a
   017D 02            [ 7]  346 	ld	(bc), a
   017E DD F9         [10]  347 	ld	sp, ix
   0180 DD E1         [14]  348 	pop	ix
   0182 C9            [10]  349 	ret
                            350 	.area _CODE
                            351 	.area _INITIALIZER
                            352 	.area _CABS (ABS)
