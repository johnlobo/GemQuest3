                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Mac OS X x86_64)
                              4 ;--------------------------------------------------------
                              5 	.module tools
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _resultYesNo
                             12 	.globl _resultNumber
                             13 	.globl _updateNumber
                             14 	.globl _drawText
                             15 	.globl _strLength
                             16 	.globl _wait4OneKey
                             17 	.globl _sprintf
                             18 	.globl _cpct_zx7b_decrunch_s
                             19 	.globl _cpct_getScreenPtr
                             20 	.globl _cpct_drawSpriteMaskedAlignedTable
                             21 	.globl _cpct_drawSprite
                             22 	.globl _cpct_drawSolidBox
                             23 	.globl _cpct_px2byteM0
                             24 	.globl _cpct_getScreenToSprite
                             25 	.globl _cpct_isKeyPressed
                             26 	.globl _cpct_waitHalts
                             27 	.globl _cpct_memset
                             28 	.globl _clearScreen
                             29 	.globl _drawWindow
                             30 	.globl _showMessage
                             31 	.globl _drawCompressToScreen
                             32 	.globl _winape_breakpoint
                             33 ;--------------------------------------------------------
                             34 ; special function registers
                             35 ;--------------------------------------------------------
                             36 ;--------------------------------------------------------
                             37 ; ram data
                             38 ;--------------------------------------------------------
                             39 	.area _DATA
                             40 ;--------------------------------------------------------
                             41 ; ram data
                             42 ;--------------------------------------------------------
                             43 	.area _INITIALIZED
                             44 ;--------------------------------------------------------
                             45 ; absolute external ram data
                             46 ;--------------------------------------------------------
                             47 	.area _DABS (ABS)
                             48 ;--------------------------------------------------------
                             49 ; global & static initialisations
                             50 ;--------------------------------------------------------
                             51 	.area _HOME
                             52 	.area _GSINIT
                             53 	.area _GSFINAL
                             54 	.area _GSINIT
                             55 ;--------------------------------------------------------
                             56 ; Home
                             57 ;--------------------------------------------------------
                             58 	.area _HOME
                             59 	.area _HOME
                             60 ;--------------------------------------------------------
                             61 ; code
                             62 ;--------------------------------------------------------
                             63 	.area _CODE
                             64 ;src/util/tools.c:32: void clearScreen(u8 bgColor)
                             65 ;	---------------------------------
                             66 ; Function clearScreen
                             67 ; ---------------------------------
   0000                      68 _clearScreen::
                             69 ;src/util/tools.c:35: cpct_memset(CPCT_VMEM_START, cpct_px2byteM0(bgColor, bgColor), 0x4000);
   0000 FD 21 02 00   [14]   70 	ld	iy, #2
   0004 FD 39         [15]   71 	add	iy, sp
   0006 FD 66 00      [19]   72 	ld	h, 0 (iy)
   0009 FD 6E 00      [19]   73 	ld	l, 0 (iy)
   000C E5            [11]   74 	push	hl
   000D CDr00r00      [17]   75 	call	_cpct_px2byteM0
   0010 45            [ 4]   76 	ld	b, l
   0011 21 00 40      [10]   77 	ld	hl, #0x4000
   0014 E5            [11]   78 	push	hl
   0015 C5            [11]   79 	push	bc
   0016 33            [ 6]   80 	inc	sp
   0017 26 C0         [ 7]   81 	ld	h, #0xc0
   0019 E5            [11]   82 	push	hl
   001A CDr00r00      [17]   83 	call	_cpct_memset
   001D C9            [10]   84 	ret
                             85 ;src/util/tools.c:46: void drawWindow(u8 x, u8 y, u8 width, u8 height, u8 fgColor, u8 bgColor)
                             86 ;	---------------------------------
                             87 ; Function drawWindow
                             88 ; ---------------------------------
   001E                      89 _drawWindow::
   001E DD E5         [15]   90 	push	ix
   0020 DD 21 00 00   [14]   91 	ld	ix,#0
   0024 DD 39         [15]   92 	add	ix,sp
   0026 F5            [11]   93 	push	af
   0027 F5            [11]   94 	push	af
                             95 ;src/util/tools.c:51: pvideo = cpct_getScreenPtr(CPCT_VMEM_START, x + 1, y);
   0028 DD 56 04      [19]   96 	ld	d, 4 (ix)
   002B 14            [ 4]   97 	inc	d
   002C D5            [11]   98 	push	de
   002D DD 7E 05      [19]   99 	ld	a, 5 (ix)
   0030 F5            [11]  100 	push	af
   0031 33            [ 6]  101 	inc	sp
   0032 D5            [11]  102 	push	de
   0033 33            [ 6]  103 	inc	sp
   0034 21 00 C0      [10]  104 	ld	hl, #0xc000
   0037 E5            [11]  105 	push	hl
   0038 CDr00r00      [17]  106 	call	_cpct_getScreenPtr
   003B 4D            [ 4]  107 	ld	c, l
   003C 44            [ 4]  108 	ld	b, h
   003D D1            [10]  109 	pop	de
                            110 ;src/util/tools.c:52: cpct_drawSolidBox(pvideo, cpct_px2byteM0(fgColor, fgColor), width - 4, 2);
   003E DD 7E 06      [19]  111 	ld	a, 6 (ix)
   0041 C6 FC         [ 7]  112 	add	a, #0xfc
   0043 5F            [ 4]  113 	ld	e, a
   0044 C5            [11]  114 	push	bc
   0045 D5            [11]  115 	push	de
   0046 DD 66 08      [19]  116 	ld	h, 8 (ix)
   0049 DD 6E 08      [19]  117 	ld	l, 8 (ix)
   004C E5            [11]  118 	push	hl
   004D CDr00r00      [17]  119 	call	_cpct_px2byteM0
   0050 65            [ 4]  120 	ld	h, l
   0051 D1            [10]  121 	pop	de
   0052 C1            [10]  122 	pop	bc
   0053 69            [ 4]  123 	ld	l, c
   0054 D5            [11]  124 	push	de
   0055 16 02         [ 7]  125 	ld	d,#0x02
   0057 D5            [11]  126 	push	de
   0058 E5            [11]  127 	push	hl
   0059 33            [ 6]  128 	inc	sp
   005A 60            [ 4]  129 	ld	h, b
   005B E5            [11]  130 	push	hl
   005C CDr00r00      [17]  131 	call	_cpct_drawSolidBox
   005F D1            [10]  132 	pop	de
                            133 ;src/util/tools.c:53: pvideo = cpct_getScreenPtr(CPCT_VMEM_START, x + 1, y + height);
   0060 DD 7E 05      [19]  134 	ld	a, 5 (ix)
   0063 DD 86 07      [19]  135 	add	a, 7 (ix)
   0066 DD 77 FF      [19]  136 	ld	-1 (ix), a
   0069 D5            [11]  137 	push	de
   006A F5            [11]  138 	push	af
   006B 33            [ 6]  139 	inc	sp
   006C D5            [11]  140 	push	de
   006D 33            [ 6]  141 	inc	sp
   006E 21 00 C0      [10]  142 	ld	hl, #0xc000
   0071 E5            [11]  143 	push	hl
   0072 CDr00r00      [17]  144 	call	_cpct_getScreenPtr
   0075 4D            [ 4]  145 	ld	c, l
   0076 44            [ 4]  146 	ld	b, h
   0077 D1            [10]  147 	pop	de
                            148 ;src/util/tools.c:54: cpct_drawSolidBox(pvideo, cpct_px2byteM0(fgColor, fgColor), width - 4, 2);
   0078 C5            [11]  149 	push	bc
   0079 D5            [11]  150 	push	de
   007A DD 66 08      [19]  151 	ld	h, 8 (ix)
   007D DD 6E 08      [19]  152 	ld	l, 8 (ix)
   0080 E5            [11]  153 	push	hl
   0081 CDr00r00      [17]  154 	call	_cpct_px2byteM0
   0084 DD 75 FE      [19]  155 	ld	-2 (ix), l
   0087 D1            [10]  156 	pop	de
   0088 C1            [10]  157 	pop	bc
   0089 D5            [11]  158 	push	de
   008A 16 02         [ 7]  159 	ld	d,#0x02
   008C D5            [11]  160 	push	de
   008D DD 7E FE      [19]  161 	ld	a, -2 (ix)
   0090 F5            [11]  162 	push	af
   0091 33            [ 6]  163 	inc	sp
   0092 C5            [11]  164 	push	bc
   0093 CDr00r00      [17]  165 	call	_cpct_drawSolidBox
   0096 D1            [10]  166 	pop	de
                            167 ;src/util/tools.c:56: pvideo = cpct_getScreenPtr(CPCT_VMEM_START, x + 1, y + 2);
   0097 DD 7E 05      [19]  168 	ld	a, 5 (ix)
   009A C6 02         [ 7]  169 	add	a, #0x02
   009C DD 77 FE      [19]  170 	ld	-2 (ix), a
   009F D5            [11]  171 	push	de
   00A0 F5            [11]  172 	push	af
   00A1 33            [ 6]  173 	inc	sp
   00A2 D5            [11]  174 	push	de
   00A3 33            [ 6]  175 	inc	sp
   00A4 21 00 C0      [10]  176 	ld	hl, #0xc000
   00A7 E5            [11]  177 	push	hl
   00A8 CDr00r00      [17]  178 	call	_cpct_getScreenPtr
   00AB D1            [10]  179 	pop	de
                            180 ;src/util/tools.c:57: cpct_drawSolidBox(pvideo, cpct_px2byteM0(BG_COLOR, BG_COLOR), width - 4, 2);
   00AC E5            [11]  181 	push	hl
   00AD D5            [11]  182 	push	de
   00AE 01 00 00      [10]  183 	ld	bc, #0x0000
   00B1 C5            [11]  184 	push	bc
   00B2 CDr00r00      [17]  185 	call	_cpct_px2byteM0
   00B5 4D            [ 4]  186 	ld	c, l
   00B6 D1            [10]  187 	pop	de
   00B7 E1            [10]  188 	pop	hl
   00B8 D5            [11]  189 	push	de
   00B9 16 02         [ 7]  190 	ld	d,#0x02
   00BB D5            [11]  191 	push	de
   00BC 79            [ 4]  192 	ld	a, c
   00BD F5            [11]  193 	push	af
   00BE 33            [ 6]  194 	inc	sp
   00BF E5            [11]  195 	push	hl
   00C0 CDr00r00      [17]  196 	call	_cpct_drawSolidBox
   00C3 D1            [10]  197 	pop	de
                            198 ;src/util/tools.c:58: pvideo = cpct_getScreenPtr(CPCT_VMEM_START, x + 1, y + height - 2);
   00C4 DD 35 FF      [23]  199 	dec	-1 (ix)
   00C7 DD 35 FF      [23]  200 	dec	-1 (ix)
   00CA D5            [11]  201 	push	de
   00CB DD 7E FF      [19]  202 	ld	a, -1 (ix)
   00CE F5            [11]  203 	push	af
   00CF 33            [ 6]  204 	inc	sp
   00D0 D5            [11]  205 	push	de
   00D1 33            [ 6]  206 	inc	sp
   00D2 21 00 C0      [10]  207 	ld	hl, #0xc000
   00D5 E5            [11]  208 	push	hl
   00D6 CDr00r00      [17]  209 	call	_cpct_getScreenPtr
   00D9 D1            [10]  210 	pop	de
                            211 ;src/util/tools.c:59: cpct_drawSolidBox(pvideo, cpct_px2byteM0(BG_COLOR, BG_COLOR), width - 4, 2);
   00DA E5            [11]  212 	push	hl
   00DB D5            [11]  213 	push	de
   00DC 01 00 00      [10]  214 	ld	bc, #0x0000
   00DF C5            [11]  215 	push	bc
   00E0 CDr00r00      [17]  216 	call	_cpct_px2byteM0
   00E3 4D            [ 4]  217 	ld	c, l
   00E4 D1            [10]  218 	pop	de
   00E5 E1            [10]  219 	pop	hl
   00E6 D5            [11]  220 	push	de
   00E7 16 02         [ 7]  221 	ld	d,#0x02
   00E9 D5            [11]  222 	push	de
   00EA 79            [ 4]  223 	ld	a, c
   00EB F5            [11]  224 	push	af
   00EC 33            [ 6]  225 	inc	sp
   00ED E5            [11]  226 	push	hl
   00EE CDr00r00      [17]  227 	call	_cpct_drawSolidBox
   00F1 D1            [10]  228 	pop	de
                            229 ;src/util/tools.c:61: pvideo = cpct_getScreenPtr(CPCT_VMEM_START, x + 1, y + 4);
   00F2 DD 7E 05      [19]  230 	ld	a, 5 (ix)
   00F5 C6 04         [ 7]  231 	add	a, #0x04
   00F7 DD 77 FD      [19]  232 	ld	-3 (ix), a
   00FA D5            [11]  233 	push	de
   00FB F5            [11]  234 	push	af
   00FC 33            [ 6]  235 	inc	sp
   00FD D5            [11]  236 	push	de
   00FE 33            [ 6]  237 	inc	sp
   00FF 21 00 C0      [10]  238 	ld	hl, #0xc000
   0102 E5            [11]  239 	push	hl
   0103 CDr00r00      [17]  240 	call	_cpct_getScreenPtr
   0106 4D            [ 4]  241 	ld	c, l
   0107 44            [ 4]  242 	ld	b, h
   0108 D1            [10]  243 	pop	de
                            244 ;src/util/tools.c:62: cpct_drawSolidBox(pvideo, cpct_px2byteM0(bgColor, bgColor), width - 4, height - 6);
   0109 DD 7E 07      [19]  245 	ld	a, 7 (ix)
   010C C6 FA         [ 7]  246 	add	a, #0xfa
   010E DD 77 FC      [19]  247 	ld	-4 (ix), a
   0111 C5            [11]  248 	push	bc
   0112 D5            [11]  249 	push	de
   0113 DD 66 09      [19]  250 	ld	h, 9 (ix)
   0116 DD 6E 09      [19]  251 	ld	l, 9 (ix)
   0119 E5            [11]  252 	push	hl
   011A CDr00r00      [17]  253 	call	_cpct_px2byteM0
   011D 7D            [ 4]  254 	ld	a, l
   011E D1            [10]  255 	pop	de
   011F 57            [ 4]  256 	ld	d, a
   0120 C1            [10]  257 	pop	bc
   0121 DD 7E FC      [19]  258 	ld	a, -4 (ix)
   0124 F5            [11]  259 	push	af
   0125 33            [ 6]  260 	inc	sp
   0126 7B            [ 4]  261 	ld	a, e
   0127 F5            [11]  262 	push	af
   0128 33            [ 6]  263 	inc	sp
   0129 D5            [11]  264 	push	de
   012A 33            [ 6]  265 	inc	sp
   012B C5            [11]  266 	push	bc
   012C CDr00r00      [17]  267 	call	_cpct_drawSolidBox
                            268 ;src/util/tools.c:65: pvideo = cpct_getScreenPtr(CPCT_VMEM_START, x, y + 2);
   012F DD 66 FE      [19]  269 	ld	h, -2 (ix)
   0132 DD 6E 04      [19]  270 	ld	l, 4 (ix)
   0135 E5            [11]  271 	push	hl
   0136 21 00 C0      [10]  272 	ld	hl, #0xc000
   0139 E5            [11]  273 	push	hl
   013A CDr00r00      [17]  274 	call	_cpct_getScreenPtr
                            275 ;src/util/tools.c:66: cpct_drawSolidBox(pvideo, cpct_px2byteM0(BG_COLOR, fgColor), 1, 2);
   013D E5            [11]  276 	push	hl
   013E DD 7E 08      [19]  277 	ld	a, 8 (ix)
   0141 F5            [11]  278 	push	af
   0142 33            [ 6]  279 	inc	sp
   0143 AF            [ 4]  280 	xor	a, a
   0144 F5            [11]  281 	push	af
   0145 33            [ 6]  282 	inc	sp
   0146 CDr00r00      [17]  283 	call	_cpct_px2byteM0
   0149 55            [ 4]  284 	ld	d, l
   014A C1            [10]  285 	pop	bc
   014B 21 01 02      [10]  286 	ld	hl, #0x0201
   014E E5            [11]  287 	push	hl
   014F D5            [11]  288 	push	de
   0150 33            [ 6]  289 	inc	sp
   0151 C5            [11]  290 	push	bc
   0152 CDr00r00      [17]  291 	call	_cpct_drawSolidBox
                            292 ;src/util/tools.c:69: pvideo = cpct_getScreenPtr(CPCT_VMEM_START, x, y + 4);
   0155 DD 66 FD      [19]  293 	ld	h, -3 (ix)
   0158 DD 6E 04      [19]  294 	ld	l, 4 (ix)
   015B E5            [11]  295 	push	hl
   015C 21 00 C0      [10]  296 	ld	hl, #0xc000
   015F E5            [11]  297 	push	hl
   0160 CDr00r00      [17]  298 	call	_cpct_getScreenPtr
                            299 ;src/util/tools.c:70: cpct_drawSolidBox(pvideo, cpct_px2byteM0(fgColor, BG_COLOR), 1, height - 6);
   0163 E5            [11]  300 	push	hl
   0164 AF            [ 4]  301 	xor	a, a
   0165 F5            [11]  302 	push	af
   0166 33            [ 6]  303 	inc	sp
   0167 DD 7E 08      [19]  304 	ld	a, 8 (ix)
   016A F5            [11]  305 	push	af
   016B 33            [ 6]  306 	inc	sp
   016C CDr00r00      [17]  307 	call	_cpct_px2byteM0
   016F 55            [ 4]  308 	ld	d, l
   0170 C1            [10]  309 	pop	bc
   0171 DD 7E FC      [19]  310 	ld	a, -4 (ix)
   0174 F5            [11]  311 	push	af
   0175 33            [ 6]  312 	inc	sp
   0176 3E 01         [ 7]  313 	ld	a, #0x01
   0178 F5            [11]  314 	push	af
   0179 33            [ 6]  315 	inc	sp
   017A D5            [11]  316 	push	de
   017B 33            [ 6]  317 	inc	sp
   017C C5            [11]  318 	push	bc
   017D CDr00r00      [17]  319 	call	_cpct_drawSolidBox
                            320 ;src/util/tools.c:73: pvideo = cpct_getScreenPtr(CPCT_VMEM_START, x, y + height - 2);
   0180 DD 66 FF      [19]  321 	ld	h, -1 (ix)
   0183 DD 6E 04      [19]  322 	ld	l, 4 (ix)
   0186 E5            [11]  323 	push	hl
   0187 21 00 C0      [10]  324 	ld	hl, #0xc000
   018A E5            [11]  325 	push	hl
   018B CDr00r00      [17]  326 	call	_cpct_getScreenPtr
                            327 ;src/util/tools.c:74: cpct_drawSolidBox(pvideo, cpct_px2byteM0(BG_COLOR, fgColor), 1, 2);
   018E E5            [11]  328 	push	hl
   018F DD 7E 08      [19]  329 	ld	a, 8 (ix)
   0192 F5            [11]  330 	push	af
   0193 33            [ 6]  331 	inc	sp
   0194 AF            [ 4]  332 	xor	a, a
   0195 F5            [11]  333 	push	af
   0196 33            [ 6]  334 	inc	sp
   0197 CDr00r00      [17]  335 	call	_cpct_px2byteM0
   019A 55            [ 4]  336 	ld	d, l
   019B C1            [10]  337 	pop	bc
   019C 21 01 02      [10]  338 	ld	hl, #0x0201
   019F E5            [11]  339 	push	hl
   01A0 D5            [11]  340 	push	de
   01A1 33            [ 6]  341 	inc	sp
   01A2 C5            [11]  342 	push	bc
   01A3 CDr00r00      [17]  343 	call	_cpct_drawSolidBox
                            344 ;src/util/tools.c:76: pvideo = cpct_getScreenPtr(CPCT_VMEM_START, x + width - 3, y + 2);
   01A6 DD 7E 04      [19]  345 	ld	a, 4 (ix)
   01A9 DD 86 06      [19]  346 	add	a, 6 (ix)
   01AC C6 FD         [ 7]  347 	add	a, #0xfd
   01AE 47            [ 4]  348 	ld	b, a
   01AF C5            [11]  349 	push	bc
   01B0 DD 7E FE      [19]  350 	ld	a, -2 (ix)
   01B3 F5            [11]  351 	push	af
   01B4 33            [ 6]  352 	inc	sp
   01B5 C5            [11]  353 	push	bc
   01B6 33            [ 6]  354 	inc	sp
   01B7 21 00 C0      [10]  355 	ld	hl, #0xc000
   01BA E5            [11]  356 	push	hl
   01BB CDr00r00      [17]  357 	call	_cpct_getScreenPtr
   01BE C1            [10]  358 	pop	bc
                            359 ;src/util/tools.c:77: cpct_drawSolidBox(pvideo, cpct_px2byteM0(fgColor, BG_COLOR), 1, 2);
   01BF E5            [11]  360 	push	hl
   01C0 C5            [11]  361 	push	bc
   01C1 AF            [ 4]  362 	xor	a, a
   01C2 F5            [11]  363 	push	af
   01C3 33            [ 6]  364 	inc	sp
   01C4 DD 7E 08      [19]  365 	ld	a, 8 (ix)
   01C7 F5            [11]  366 	push	af
   01C8 33            [ 6]  367 	inc	sp
   01C9 CDr00r00      [17]  368 	call	_cpct_px2byteM0
   01CC 4D            [ 4]  369 	ld	c, l
   01CD F1            [10]  370 	pop	af
   01CE 47            [ 4]  371 	ld	b, a
   01CF E1            [10]  372 	pop	hl
   01D0 C5            [11]  373 	push	bc
   01D1 11 01 02      [10]  374 	ld	de, #0x0201
   01D4 D5            [11]  375 	push	de
   01D5 79            [ 4]  376 	ld	a, c
   01D6 F5            [11]  377 	push	af
   01D7 33            [ 6]  378 	inc	sp
   01D8 E5            [11]  379 	push	hl
   01D9 CDr00r00      [17]  380 	call	_cpct_drawSolidBox
   01DC C1            [10]  381 	pop	bc
                            382 ;src/util/tools.c:79: pvideo = cpct_getScreenPtr(CPCT_VMEM_START, x + width - 3, y + 4);
   01DD C5            [11]  383 	push	bc
   01DE DD 7E FD      [19]  384 	ld	a, -3 (ix)
   01E1 F5            [11]  385 	push	af
   01E2 33            [ 6]  386 	inc	sp
   01E3 C5            [11]  387 	push	bc
   01E4 33            [ 6]  388 	inc	sp
   01E5 21 00 C0      [10]  389 	ld	hl, #0xc000
   01E8 E5            [11]  390 	push	hl
   01E9 CDr00r00      [17]  391 	call	_cpct_getScreenPtr
   01EC E5            [11]  392 	push	hl
   01ED DD 7E 08      [19]  393 	ld	a, 8 (ix)
   01F0 F5            [11]  394 	push	af
   01F1 33            [ 6]  395 	inc	sp
   01F2 AF            [ 4]  396 	xor	a, a
   01F3 F5            [11]  397 	push	af
   01F4 33            [ 6]  398 	inc	sp
   01F5 CDr00r00      [17]  399 	call	_cpct_px2byteM0
   01F8 4D            [ 4]  400 	ld	c, l
   01F9 D1            [10]  401 	pop	de
   01FA F1            [10]  402 	pop	af
   01FB 47            [ 4]  403 	ld	b, a
   01FC C5            [11]  404 	push	bc
   01FD DD 7E FC      [19]  405 	ld	a, -4 (ix)
   0200 F5            [11]  406 	push	af
   0201 33            [ 6]  407 	inc	sp
   0202 06 01         [ 7]  408 	ld	b, #0x01
   0204 C5            [11]  409 	push	bc
   0205 D5            [11]  410 	push	de
   0206 CDr00r00      [17]  411 	call	_cpct_drawSolidBox
   0209 C1            [10]  412 	pop	bc
                            413 ;src/util/tools.c:82: pvideo = cpct_getScreenPtr(CPCT_VMEM_START, x + width - 3, y + height - 2);
   020A DD 7E FF      [19]  414 	ld	a, -1 (ix)
   020D F5            [11]  415 	push	af
   020E 33            [ 6]  416 	inc	sp
   020F C5            [11]  417 	push	bc
   0210 33            [ 6]  418 	inc	sp
   0211 21 00 C0      [10]  419 	ld	hl, #0xc000
   0214 E5            [11]  420 	push	hl
   0215 CDr00r00      [17]  421 	call	_cpct_getScreenPtr
                            422 ;src/util/tools.c:83: cpct_drawSolidBox(pvideo, cpct_px2byteM0(fgColor, BG_COLOR), 1, 2);
   0218 E5            [11]  423 	push	hl
   0219 AF            [ 4]  424 	xor	a, a
   021A F5            [11]  425 	push	af
   021B 33            [ 6]  426 	inc	sp
   021C DD 7E 08      [19]  427 	ld	a, 8 (ix)
   021F F5            [11]  428 	push	af
   0220 33            [ 6]  429 	inc	sp
   0221 CDr00r00      [17]  430 	call	_cpct_px2byteM0
   0224 55            [ 4]  431 	ld	d, l
   0225 C1            [10]  432 	pop	bc
   0226 21 01 02      [10]  433 	ld	hl, #0x0201
   0229 E5            [11]  434 	push	hl
   022A D5            [11]  435 	push	de
   022B 33            [ 6]  436 	inc	sp
   022C C5            [11]  437 	push	bc
   022D CDr00r00      [17]  438 	call	_cpct_drawSolidBox
   0230 DD F9         [10]  439 	ld	sp, ix
   0232 DD E1         [14]  440 	pop	ix
   0234 C9            [10]  441 	ret
                            442 ;src/util/tools.c:94: void updateNumber(u8 number)
                            443 ;	---------------------------------
                            444 ; Function updateNumber
                            445 ; ---------------------------------
   0235                     446 _updateNumber::
   0235 DD E5         [15]  447 	push	ix
   0237 DD 21 00 00   [14]  448 	ld	ix,#0
   023B DD 39         [15]  449 	add	ix,sp
   023D F5            [11]  450 	push	af
   023E 3B            [ 6]  451 	dec	sp
                            452 ;src/util/tools.c:99: pvmem = cpct_getScreenPtr(SCR_VMEM, 58, 80);
   023F 21 3A 50      [10]  453 	ld	hl, #0x503a
   0242 E5            [11]  454 	push	hl
   0243 21 00 C0      [10]  455 	ld	hl, #0xc000
   0246 E5            [11]  456 	push	hl
   0247 CDr00r00      [17]  457 	call	_cpct_getScreenPtr
                            458 ;src/util/tools.c:100: cpct_drawSolidBox(pvmem, cpct_px2byteM0(14, 14), 8, 14);
   024A E5            [11]  459 	push	hl
   024B 21 0E 0E      [10]  460 	ld	hl, #0x0e0e
   024E E5            [11]  461 	push	hl
   024F CDr00r00      [17]  462 	call	_cpct_px2byteM0
   0252 55            [ 4]  463 	ld	d, l
   0253 C1            [10]  464 	pop	bc
   0254 21 08 0E      [10]  465 	ld	hl, #0x0e08
   0257 E5            [11]  466 	push	hl
   0258 D5            [11]  467 	push	de
   0259 33            [ 6]  468 	inc	sp
   025A C5            [11]  469 	push	bc
   025B CDr00r00      [17]  470 	call	_cpct_drawSolidBox
                            471 ;src/util/tools.c:101: sprintf(text, "%02d", number);
   025E DD 5E 04      [19]  472 	ld	e, 4 (ix)
   0261 16 00         [ 7]  473 	ld	d, #0x00
   0263 21 00 00      [10]  474 	ld	hl, #0x0000
   0266 39            [11]  475 	add	hl, sp
   0267 4D            [ 4]  476 	ld	c, l
   0268 44            [ 4]  477 	ld	b, h
   0269 E5            [11]  478 	push	hl
   026A D5            [11]  479 	push	de
   026B 11r93r02      [10]  480 	ld	de, #___str_0
   026E D5            [11]  481 	push	de
   026F C5            [11]  482 	push	bc
   0270 CDr00r00      [17]  483 	call	_sprintf
   0273 21 06 00      [10]  484 	ld	hl, #6
   0276 39            [11]  485 	add	hl, sp
   0277 F9            [ 6]  486 	ld	sp, hl
   0278 E1            [10]  487 	pop	hl
                            488 ;src/util/tools.c:102: drawText(text, 58, 80, COLORTXT_YELLOW, DOUBLEHEIGHT, TRANSPARENT);
   0279 01 02 01      [10]  489 	ld	bc, #0x0102
   027C C5            [11]  490 	push	bc
   027D 01 50 01      [10]  491 	ld	bc, #0x0150
   0280 C5            [11]  492 	push	bc
   0281 3E 3A         [ 7]  493 	ld	a, #0x3a
   0283 F5            [11]  494 	push	af
   0284 33            [ 6]  495 	inc	sp
   0285 E5            [11]  496 	push	hl
   0286 CDr00r00      [17]  497 	call	_drawText
   0289 21 07 00      [10]  498 	ld	hl, #7
   028C 39            [11]  499 	add	hl, sp
   028D F9            [ 6]  500 	ld	sp, hl
   028E DD F9         [10]  501 	ld	sp, ix
   0290 DD E1         [14]  502 	pop	ix
   0292 C9            [10]  503 	ret
   0293                     504 ___str_0:
   0293 25 30 32 64         505 	.ascii "%02d"
   0297 00                  506 	.db 0x00
                            507 ;src/util/tools.c:112: u8 resultNumber()
                            508 ;	---------------------------------
                            509 ; Function resultNumber
                            510 ; ---------------------------------
   0298                     511 _resultNumber::
                            512 ;src/util/tools.c:116: selection = 1;
   0298 0E 01         [ 7]  513 	ld	c, #0x01
                            514 ;src/util/tools.c:117: drawText("UP/DOWN:CHANGE LEVEL", 16, 92, COLORTXT_MAUVE, NORMALHEIGHT, TRANSPARENT);
   029A C5            [11]  515 	push	bc
   029B 21 01 01      [10]  516 	ld	hl, #0x0101
   029E E5            [11]  517 	push	hl
   029F 21 5C 05      [10]  518 	ld	hl, #0x055c
   02A2 E5            [11]  519 	push	hl
   02A3 3E 10         [ 7]  520 	ld	a, #0x10
   02A5 F5            [11]  521 	push	af
   02A6 33            [ 6]  522 	inc	sp
   02A7 21r56r03      [10]  523 	ld	hl, #___str_1
   02AA E5            [11]  524 	push	hl
   02AB CDr00r00      [17]  525 	call	_drawText
   02AE 21 07 00      [10]  526 	ld	hl, #7
   02B1 39            [11]  527 	add	hl, sp
   02B2 F9            [ 6]  528 	ld	sp, hl
   02B3 21 01 01      [10]  529 	ld	hl, #0x0101
   02B6 E5            [11]  530 	push	hl
   02B7 21 68 05      [10]  531 	ld	hl, #0x0568
   02BA E5            [11]  532 	push	hl
   02BB 3E 10         [ 7]  533 	ld	a, #0x10
   02BD F5            [11]  534 	push	af
   02BE 33            [ 6]  535 	inc	sp
   02BF 21r6Br03      [10]  536 	ld	hl, #___str_2
   02C2 E5            [11]  537 	push	hl
   02C3 CDr00r00      [17]  538 	call	_drawText
   02C6 21 07 00      [10]  539 	ld	hl, #7
   02C9 39            [11]  540 	add	hl, sp
   02CA F9            [ 6]  541 	ld	sp, hl
   02CB 3E 01         [ 7]  542 	ld	a, #0x01
   02CD F5            [11]  543 	push	af
   02CE 33            [ 6]  544 	inc	sp
   02CF CDr35r02      [17]  545 	call	_updateNumber
   02D2 33            [ 6]  546 	inc	sp
   02D3 C1            [10]  547 	pop	bc
                            548 ;src/util/tools.c:120: while (1)
   02D4                     549 00117$:
                            550 ;src/util/tools.c:123: cpct_waitHalts(20);
   02D4 C5            [11]  551 	push	bc
   02D5 2E 14         [ 7]  552 	ld	l, #0x14
   02D7 CDr00r00      [17]  553 	call	_cpct_waitHalts
   02DA C1            [10]  554 	pop	bc
                            555 ;src/util/tools.c:124: if ((cpct_isKeyPressed(keys1.up)) || (cpct_isKeyPressed(keys1.j_up)))
   02DB 2Ar00r00      [16]  556 	ld	hl, (#_keys1 + 0)
   02DE C5            [11]  557 	push	bc
   02DF CDr00r00      [17]  558 	call	_cpct_isKeyPressed
   02E2 C1            [10]  559 	pop	bc
   02E3 7D            [ 4]  560 	ld	a, l
   02E4 B7            [ 4]  561 	or	a, a
   02E5 20 0C         [12]  562 	jr	NZ,00108$
   02E7 2Ar0Cr00      [16]  563 	ld	hl, (#(_keys1 + 0x000c) + 0)
   02EA C5            [11]  564 	push	bc
   02EB CDr00r00      [17]  565 	call	_cpct_isKeyPressed
   02EE C1            [10]  566 	pop	bc
   02EF 7D            [ 4]  567 	ld	a, l
   02F0 B7            [ 4]  568 	or	a, a
   02F1 28 13         [12]  569 	jr	Z,00109$
   02F3                     570 00108$:
                            571 ;src/util/tools.c:126: selection++;
   02F3 0C            [ 4]  572 	inc	c
                            573 ;src/util/tools.c:127: if (selection > 17)
   02F4 3E 11         [ 7]  574 	ld	a, #0x11
   02F6 91            [ 4]  575 	sub	a, c
   02F7 30 02         [12]  576 	jr	NC,00102$
                            577 ;src/util/tools.c:128: selection = 1;
   02F9 0E 01         [ 7]  578 	ld	c, #0x01
   02FB                     579 00102$:
                            580 ;src/util/tools.c:129: updateNumber(selection);
   02FB C5            [11]  581 	push	bc
   02FC 79            [ 4]  582 	ld	a, c
   02FD F5            [11]  583 	push	af
   02FE 33            [ 6]  584 	inc	sp
   02FF CDr35r02      [17]  585 	call	_updateNumber
   0302 33            [ 6]  586 	inc	sp
   0303 C1            [10]  587 	pop	bc
   0304 18 29         [12]  588 	jr	00110$
   0306                     589 00109$:
                            590 ;src/util/tools.c:131: else if ((cpct_isKeyPressed(keys1.down)) || (cpct_isKeyPressed(keys1.j_down)))
   0306 2Ar02r00      [16]  591 	ld	hl, (#(_keys1 + 0x0002) + 0)
   0309 C5            [11]  592 	push	bc
   030A CDr00r00      [17]  593 	call	_cpct_isKeyPressed
   030D C1            [10]  594 	pop	bc
   030E 7D            [ 4]  595 	ld	a, l
   030F B7            [ 4]  596 	or	a, a
   0310 20 0C         [12]  597 	jr	NZ,00105$
   0312 2Ar0Er00      [16]  598 	ld	hl, (#(_keys1 + 0x000e) + 0)
   0315 C5            [11]  599 	push	bc
   0316 CDr00r00      [17]  600 	call	_cpct_isKeyPressed
   0319 C1            [10]  601 	pop	bc
   031A 7D            [ 4]  602 	ld	a, l
   031B B7            [ 4]  603 	or	a, a
   031C 28 11         [12]  604 	jr	Z,00110$
   031E                     605 00105$:
                            606 ;src/util/tools.c:133: selection--;
   031E 0D            [ 4]  607 	dec	c
                            608 ;src/util/tools.c:134: if (selection < 1)
   031F 79            [ 4]  609 	ld	a, c
   0320 D6 01         [ 7]  610 	sub	a, #0x01
   0322 30 02         [12]  611 	jr	NC,00104$
                            612 ;src/util/tools.c:135: selection = 17;
   0324 0E 11         [ 7]  613 	ld	c, #0x11
   0326                     614 00104$:
                            615 ;src/util/tools.c:136: updateNumber(selection);
   0326 C5            [11]  616 	push	bc
   0327 79            [ 4]  617 	ld	a, c
   0328 F5            [11]  618 	push	af
   0329 33            [ 6]  619 	inc	sp
   032A CDr35r02      [17]  620 	call	_updateNumber
   032D 33            [ 6]  621 	inc	sp
   032E C1            [10]  622 	pop	bc
   032F                     623 00110$:
                            624 ;src/util/tools.c:138: if ((cpct_isKeyPressed(keys1.fire1)) || (cpct_isKeyPressed(keys1.j_fire1)) || (cpct_isKeyPressed(keys1.j_fire2)))
   032F 2Ar08r00      [16]  625 	ld	hl, (#(_keys1 + 0x0008) + 0)
   0332 C5            [11]  626 	push	bc
   0333 CDr00r00      [17]  627 	call	_cpct_isKeyPressed
   0336 C1            [10]  628 	pop	bc
   0337 7D            [ 4]  629 	ld	a, l
   0338 B7            [ 4]  630 	or	a, a
   0339 20 19         [12]  631 	jr	NZ,00112$
   033B 2Ar14r00      [16]  632 	ld	hl, (#(_keys1 + 0x0014) + 0)
   033E C5            [11]  633 	push	bc
   033F CDr00r00      [17]  634 	call	_cpct_isKeyPressed
   0342 C1            [10]  635 	pop	bc
   0343 7D            [ 4]  636 	ld	a, l
   0344 B7            [ 4]  637 	or	a, a
   0345 20 0D         [12]  638 	jr	NZ,00112$
   0347 2Ar16r00      [16]  639 	ld	hl, (#(_keys1 + 0x0016) + 0)
   034A C5            [11]  640 	push	bc
   034B CDr00r00      [17]  641 	call	_cpct_isKeyPressed
   034E C1            [10]  642 	pop	bc
   034F 7D            [ 4]  643 	ld	a, l
   0350 B7            [ 4]  644 	or	a, a
   0351 CArD4r02      [10]  645 	jp	Z, 00117$
   0354                     646 00112$:
                            647 ;src/util/tools.c:140: return selection;
   0354 69            [ 4]  648 	ld	l, c
   0355 C9            [10]  649 	ret
   0356                     650 ___str_1:
   0356 55 50 2F 44 4F 57   651 	.ascii "UP/DOWN:CHANGE LEVEL"
        4E 3A 43 48 41 4E
        47 45 20 4C 45 56
        45 4C
   036A 00                  652 	.db 0x00
   036B                     653 ___str_2:
   036B 46 49 52 45 3A 20   654 	.ascii "FIRE: CONFIRM"
        43 4F 4E 46 49 52
        4D
   0378 00                  655 	.db 0x00
                            656 ;src/util/tools.c:151: u8 resultYesNo()
                            657 ;	---------------------------------
                            658 ; Function resultYesNo
                            659 ; ---------------------------------
   0379                     660 _resultYesNo::
                            661 ;src/util/tools.c:153: drawText("(YES/NO)", 32, 96, COLORTXT_YELLOW, NORMALHEIGHT, TRANSPARENT);
   0379 21 01 01      [10]  662 	ld	hl, #0x0101
   037C E5            [11]  663 	push	hl
   037D 2E 60         [ 7]  664 	ld	l, #0x60
   037F E5            [11]  665 	push	hl
   0380 3E 20         [ 7]  666 	ld	a, #0x20
   0382 F5            [11]  667 	push	af
   0383 33            [ 6]  668 	inc	sp
   0384 21rAAr03      [10]  669 	ld	hl, #___str_3
   0387 E5            [11]  670 	push	hl
   0388 CDr00r00      [17]  671 	call	_drawText
   038B 21 07 00      [10]  672 	ld	hl, #7
   038E 39            [11]  673 	add	hl, sp
   038F F9            [ 6]  674 	ld	sp, hl
                            675 ;src/util/tools.c:155: while (1)
   0390                     676 00105$:
                            677 ;src/util/tools.c:157: if ((cpct_isKeyPressed(Key_Y)) || (cpct_isKeyPressed(Key_N)))
   0390 21 05 08      [10]  678 	ld	hl, #0x0805
   0393 CDr00r00      [17]  679 	call	_cpct_isKeyPressed
   0396 7D            [ 4]  680 	ld	a, l
   0397 B7            [ 4]  681 	or	a, a
   0398 20 0A         [12]  682 	jr	NZ,00101$
   039A 21 05 40      [10]  683 	ld	hl, #0x4005
   039D CDr00r00      [17]  684 	call	_cpct_isKeyPressed
   03A0 7D            [ 4]  685 	ld	a, l
   03A1 B7            [ 4]  686 	or	a, a
   03A2 28 EC         [12]  687 	jr	Z,00105$
   03A4                     688 00101$:
                            689 ;src/util/tools.c:159: return (cpct_isKeyPressed(Key_Y));
   03A4 21 05 08      [10]  690 	ld	hl, #0x0805
                            691 ;src/util/tools.c:160: break;
   03A7 C3r00r00      [10]  692 	jp  _cpct_isKeyPressed
   03AA                     693 ___str_3:
   03AA 28 59 45 53 2F 4E   694 	.ascii "(YES/NO)"
        4F 29
   03B2 00                  695 	.db 0x00
                            696 ;src/util/tools.c:171: u8 showMessage(u8 *message, u8 type)
                            697 ;	---------------------------------
                            698 ; Function showMessage
                            699 ; ---------------------------------
   03B3                     700 _showMessage::
   03B3 DD E5         [15]  701 	push	ix
   03B5 DD 21 00 00   [14]  702 	ld	ix,#0
   03B9 DD 39         [15]  703 	add	ix,sp
   03BB 3B            [ 6]  704 	dec	sp
                            705 ;src/util/tools.c:179: if (type == NUMBER)
   03BC DD 7E 06      [19]  706 	ld	a, 6 (ix)
   03BF D6 02         [ 7]  707 	sub	a, #0x02
   03C1 20 04         [12]  708 	jr	NZ,00142$
   03C3 3E 01         [ 7]  709 	ld	a,#0x01
   03C5 18 01         [12]  710 	jr	00143$
   03C7                     711 00142$:
   03C7 AF            [ 4]  712 	xor	a,a
   03C8                     713 00143$:
   03C8 DD 77 FF      [19]  714 	ld	-1 (ix), a
   03CB B7            [ 4]  715 	or	a, a
   03CC 28 04         [12]  716 	jr	Z,00102$
                            717 ;src/util/tools.c:180: defaultMax = 56;
   03CE 0E 38         [ 7]  718 	ld	c, #0x38
   03D0 18 02         [12]  719 	jr	00103$
   03D2                     720 00102$:
                            721 ;src/util/tools.c:182: defaultMax = 26;
   03D2 0E 1A         [ 7]  722 	ld	c, #0x1a
   03D4                     723 00103$:
                            724 ;src/util/tools.c:184: messageLength = strLength(message);
   03D4 C5            [11]  725 	push	bc
   03D5 DD 6E 04      [19]  726 	ld	l,4 (ix)
   03D8 DD 66 05      [19]  727 	ld	h,5 (ix)
   03DB E5            [11]  728 	push	hl
   03DC CDr00r00      [17]  729 	call	_strLength
   03DF F1            [10]  730 	pop	af
   03E0 5D            [ 4]  731 	ld	e, l
   03E1 C1            [10]  732 	pop	bc
                            733 ;src/util/tools.c:185: w = max(((messageLength * 2) + 7), defaultMax);
   03E2 6B            [ 4]  734 	ld	l, e
   03E3 26 00         [ 7]  735 	ld	h, #0x00
   03E5 29            [11]  736 	add	hl, hl
   03E6 D5            [11]  737 	push	de
   03E7 11 07 00      [10]  738 	ld	de, #0x0007
   03EA 19            [11]  739 	add	hl, de
   03EB D1            [10]  740 	pop	de
   03EC 79            [ 4]  741 	ld	a, c
   03ED 16 00         [ 7]  742 	ld	d, #0x00
   03EF 95            [ 4]  743 	sub	a, l
   03F0 7A            [ 4]  744 	ld	a, d
   03F1 9C            [ 4]  745 	sbc	a, h
   03F2 E2rF7r03      [10]  746 	jp	PO, 00144$
   03F5 EE 80         [ 7]  747 	xor	a, #0x80
   03F7                     748 00144$:
   03F7 F2rFFr03      [10]  749 	jp	P, 00115$
   03FA 7B            [ 4]  750 	ld	a, e
   03FB 87            [ 4]  751 	add	a, a
   03FC C6 07         [ 7]  752 	add	a, #0x07
   03FE 4F            [ 4]  753 	ld	c, a
   03FF                     754 00115$:
                            755 ;src/util/tools.c:187: x = ((80 - w) / 2+1);
   03FF 59            [ 4]  756 	ld	e, c
   0400 16 00         [ 7]  757 	ld	d, #0x00
   0402 3E 50         [ 7]  758 	ld	a, #0x50
   0404 93            [ 4]  759 	sub	a, e
   0405 6F            [ 4]  760 	ld	l, a
   0406 3E 00         [ 7]  761 	ld	a, #0x00
   0408 9A            [ 4]  762 	sbc	a, d
   0409 67            [ 4]  763 	ld	h, a
   040A 5D            [ 4]  764 	ld	e, l
   040B 54            [ 4]  765 	ld	d, h
   040C CB 7C         [ 8]  766 	bit	7, h
   040E 28 02         [12]  767 	jr	Z,00117$
   0410 EB            [ 4]  768 	ex	de,hl
   0411 13            [ 6]  769 	inc	de
   0412                     770 00117$:
   0412 CB 2A         [ 8]  771 	sra	d
   0414 CB 1B         [ 8]  772 	rr	e
   0416 43            [ 4]  773 	ld	b, e
   0417 04            [ 4]  774 	inc	b
                            775 ;src/util/tools.c:191: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0418 C5            [11]  776 	push	bc
   0419 3E 3A         [ 7]  777 	ld	a, #0x3a
   041B F5            [11]  778 	push	af
   041C 33            [ 6]  779 	inc	sp
   041D C5            [11]  780 	push	bc
   041E 33            [ 6]  781 	inc	sp
   041F 21 00 C0      [10]  782 	ld	hl, #0xc000
   0422 E5            [11]  783 	push	hl
   0423 CDr00r00      [17]  784 	call	_cpct_getScreenPtr
   0426 EB            [ 4]  785 	ex	de,hl
   0427 C1            [10]  786 	pop	bc
                            787 ;src/util/tools.c:196: cpct_getScreenToSprite(pvmem, (u8*) &screenBuffer0, w, h);
   0428 21r00r00      [10]  788 	ld	hl, #_screenBuffer0+0
   042B C5            [11]  789 	push	bc
   042C D5            [11]  790 	push	de
   042D 06 3C         [ 7]  791 	ld	b, #0x3c
   042F C5            [11]  792 	push	bc
   0430 E5            [11]  793 	push	hl
   0431 D5            [11]  794 	push	de
   0432 CDr00r00      [17]  795 	call	_cpct_getScreenToSprite
   0435 D1            [10]  796 	pop	de
   0436 C1            [10]  797 	pop	bc
                            798 ;src/util/tools.c:199: drawWindow(x, y, w, h - 2, 15, 14);
   0437 C5            [11]  799 	push	bc
   0438 D5            [11]  800 	push	de
   0439 21 0F 0E      [10]  801 	ld	hl, #0x0e0f
   043C E5            [11]  802 	push	hl
   043D 3E 3A         [ 7]  803 	ld	a, #0x3a
   043F F5            [11]  804 	push	af
   0440 33            [ 6]  805 	inc	sp
   0441 51            [ 4]  806 	ld	d, c
   0442 1E 3A         [ 7]  807 	ld	e,#0x3a
   0444 D5            [11]  808 	push	de
   0445 C5            [11]  809 	push	bc
   0446 33            [ 6]  810 	inc	sp
   0447 CDr1Er00      [17]  811 	call	_drawWindow
   044A 21 06 00      [10]  812 	ld	hl, #6
   044D 39            [11]  813 	add	hl, sp
   044E F9            [ 6]  814 	ld	sp, hl
   044F D1            [10]  815 	pop	de
   0450 C1            [10]  816 	pop	bc
                            817 ;src/util/tools.c:200: drawText(message, x + 3, y + 12, COLORTXT_WHITE, DOUBLEHEIGHT, TRANSPARENT);
   0451 04            [ 4]  818 	inc	b
   0452 04            [ 4]  819 	inc	b
   0453 04            [ 4]  820 	inc	b
   0454 C5            [11]  821 	push	bc
   0455 D5            [11]  822 	push	de
   0456 21 02 01      [10]  823 	ld	hl, #0x0102
   0459 E5            [11]  824 	push	hl
   045A 21 46 00      [10]  825 	ld	hl, #0x0046
   045D E5            [11]  826 	push	hl
   045E C5            [11]  827 	push	bc
   045F 33            [ 6]  828 	inc	sp
   0460 DD 6E 04      [19]  829 	ld	l,4 (ix)
   0463 DD 66 05      [19]  830 	ld	h,5 (ix)
   0466 E5            [11]  831 	push	hl
   0467 CDr00r00      [17]  832 	call	_drawText
   046A 21 07 00      [10]  833 	ld	hl, #7
   046D 39            [11]  834 	add	hl, sp
   046E F9            [ 6]  835 	ld	sp, hl
   046F D1            [10]  836 	pop	de
   0470 C1            [10]  837 	pop	bc
                            838 ;src/util/tools.c:203: if (type == YESNO)
   0471 DD 7E 06      [19]  839 	ld	a, 6 (ix)
   0474 3D            [ 4]  840 	dec	a
   0475 20 09         [12]  841 	jr	NZ,00111$
                            842 ;src/util/tools.c:205: result = resultYesNo();
   0477 C5            [11]  843 	push	bc
   0478 D5            [11]  844 	push	de
   0479 CDr79r03      [17]  845 	call	_resultYesNo
   047C D1            [10]  846 	pop	de
   047D C1            [10]  847 	pop	bc
   047E 18 49         [12]  848 	jr	00112$
   0480                     849 00111$:
                            850 ;src/util/tools.c:207: else if (type == NUMBER)
   0480 DD 7E FF      [19]  851 	ld	a, -1 (ix)
   0483 B7            [ 4]  852 	or	a, a
   0484 28 09         [12]  853 	jr	Z,00108$
                            854 ;src/util/tools.c:209: result = resultNumber();
   0486 C5            [11]  855 	push	bc
   0487 D5            [11]  856 	push	de
   0488 CDr98r02      [17]  857 	call	_resultNumber
   048B D1            [10]  858 	pop	de
   048C C1            [10]  859 	pop	bc
   048D 18 3A         [12]  860 	jr	00112$
   048F                     861 00108$:
                            862 ;src/util/tools.c:210: } else if (type == TEMPORAL){
   048F DD 7E 06      [19]  863 	ld	a, 6 (ix)
   0492 D6 03         [ 7]  864 	sub	a, #0x03
   0494 20 0D         [12]  865 	jr	NZ,00105$
                            866 ;src/util/tools.c:211: cpct_waitHalts(100);
   0496 C5            [11]  867 	push	bc
   0497 D5            [11]  868 	push	de
   0498 2E 64         [ 7]  869 	ld	l, #0x64
   049A CDr00r00      [17]  870 	call	_cpct_waitHalts
   049D D1            [10]  871 	pop	de
   049E C1            [10]  872 	pop	bc
                            873 ;src/util/tools.c:212: result = YES;
   049F 2E 01         [ 7]  874 	ld	l, #0x01
   04A1 18 26         [12]  875 	jr	00112$
   04A3                     876 00105$:
                            877 ;src/util/tools.c:216: drawText("PRESS A KEY", 29, 96, COLORTXT_YELLOW, NORMALHEIGHT, TRANSPARENT);
   04A3 C5            [11]  878 	push	bc
   04A4 D5            [11]  879 	push	de
   04A5 21 01 01      [10]  880 	ld	hl, #0x0101
   04A8 E5            [11]  881 	push	hl
   04A9 2E 60         [ 7]  882 	ld	l, #0x60
   04AB E5            [11]  883 	push	hl
   04AC 3E 1D         [ 7]  884 	ld	a, #0x1d
   04AE F5            [11]  885 	push	af
   04AF 33            [ 6]  886 	inc	sp
   04B0 21rDAr04      [10]  887 	ld	hl, #___str_4
   04B3 E5            [11]  888 	push	hl
   04B4 CDr00r00      [17]  889 	call	_drawText
   04B7 21 07 00      [10]  890 	ld	hl, #7
   04BA 39            [11]  891 	add	hl, sp
   04BB F9            [ 6]  892 	ld	sp, hl
   04BC D1            [10]  893 	pop	de
   04BD C1            [10]  894 	pop	bc
                            895 ;src/util/tools.c:217: result = YES;
   04BE 2E 01         [ 7]  896 	ld	l, #0x01
                            897 ;src/util/tools.c:218: wait4OneKey();
   04C0 E5            [11]  898 	push	hl
   04C1 C5            [11]  899 	push	bc
   04C2 D5            [11]  900 	push	de
   04C3 CDr00r00      [17]  901 	call	_wait4OneKey
   04C6 D1            [10]  902 	pop	de
   04C7 C1            [10]  903 	pop	bc
   04C8 E1            [10]  904 	pop	hl
   04C9                     905 00112$:
                            906 ;src/util/tools.c:222: cpct_drawSprite((u8 *)0xb000, pvmem, w, h);
   04C9 E5            [11]  907 	push	hl
   04CA 06 3C         [ 7]  908 	ld	b, #0x3c
   04CC C5            [11]  909 	push	bc
   04CD D5            [11]  910 	push	de
   04CE 01 00 B0      [10]  911 	ld	bc, #0xb000
   04D1 C5            [11]  912 	push	bc
   04D2 CDr00r00      [17]  913 	call	_cpct_drawSprite
   04D5 E1            [10]  914 	pop	hl
                            915 ;src/util/tools.c:224: return result;
   04D6 33            [ 6]  916 	inc	sp
   04D7 DD E1         [14]  917 	pop	ix
   04D9 C9            [10]  918 	ret
   04DA                     919 ___str_4:
   04DA 50 52 45 53 53 20   920 	.ascii "PRESS A KEY"
        41 20 4B 45 59
   04E5 00                  921 	.db 0x00
                            922 ;src/util/tools.c:226: void drawCompressToScreen(u8 x, u8 y, u8 w, u8 h, u16 size, u8* comp_end, u8 trans){
                            923 ;	---------------------------------
                            924 ; Function drawCompressToScreen
                            925 ; ---------------------------------
   04E6                     926 _drawCompressToScreen::
   04E6 DD E5         [15]  927 	push	ix
   04E8 DD 21 00 00   [14]  928 	ld	ix,#0
   04EC DD 39         [15]  929 	add	ix,sp
   04EE F5            [11]  930 	push	af
                            931 ;src/util/tools.c:229: pvmem = cpct_getScreenPtr(SCR_VMEM, x, y);
   04EF DD 66 05      [19]  932 	ld	h, 5 (ix)
   04F2 DD 6E 04      [19]  933 	ld	l, 4 (ix)
   04F5 E5            [11]  934 	push	hl
   04F6 21 00 C0      [10]  935 	ld	hl, #0xc000
   04F9 E5            [11]  936 	push	hl
   04FA CDr00r00      [17]  937 	call	_cpct_getScreenPtr
   04FD 33            [ 6]  938 	inc	sp
   04FE 33            [ 6]  939 	inc	sp
   04FF E5            [11]  940 	push	hl
                            941 ;src/util/tools.c:230: cpct_zx7b_decrunch_s((u8*) &screenBuffer0 + size - 1, comp_end);
   0500 DD 4E 0A      [19]  942 	ld	c,10 (ix)
   0503 DD 46 0B      [19]  943 	ld	b,11 (ix)
   0506 11r00r00      [10]  944 	ld	de, #_screenBuffer0
   0509 DD 6E 08      [19]  945 	ld	l,8 (ix)
   050C DD 66 09      [19]  946 	ld	h,9 (ix)
   050F 19            [11]  947 	add	hl, de
   0510 2B            [ 6]  948 	dec	hl
   0511 C5            [11]  949 	push	bc
   0512 E5            [11]  950 	push	hl
   0513 CDr00r00      [17]  951 	call	_cpct_zx7b_decrunch_s
                            952 ;src/util/tools.c:232: cpct_drawSpriteMaskedAlignedTable(&screenBuffer0, pvmem, w, h, g_tablatrans);
   0516 C1            [10]  953 	pop	bc
   0517 C5            [11]  954 	push	bc
                            955 ;src/util/tools.c:231: if (trans)
   0518 DD 7E 0C      [19]  956 	ld	a, 12 (ix)
   051B B7            [ 4]  957 	or	a, a
   051C 28 15         [12]  958 	jr	Z,00102$
                            959 ;src/util/tools.c:232: cpct_drawSpriteMaskedAlignedTable(&screenBuffer0, pvmem, w, h, g_tablatrans);
   051E 21r00r00      [10]  960 	ld	hl, #_g_tablatrans
   0521 E5            [11]  961 	push	hl
   0522 DD 66 07      [19]  962 	ld	h, 7 (ix)
   0525 DD 6E 06      [19]  963 	ld	l, 6 (ix)
   0528 E5            [11]  964 	push	hl
   0529 C5            [11]  965 	push	bc
   052A 21r00r00      [10]  966 	ld	hl, #_screenBuffer0
   052D E5            [11]  967 	push	hl
   052E CDr00r00      [17]  968 	call	_cpct_drawSpriteMaskedAlignedTable
   0531 18 0F         [12]  969 	jr	00104$
   0533                     970 00102$:
                            971 ;src/util/tools.c:234: cpct_drawSprite(&screenBuffer0, pvmem, w, h);
   0533 DD 66 07      [19]  972 	ld	h, 7 (ix)
   0536 DD 6E 06      [19]  973 	ld	l, 6 (ix)
   0539 E5            [11]  974 	push	hl
   053A C5            [11]  975 	push	bc
   053B 21r00r00      [10]  976 	ld	hl, #_screenBuffer0
   053E E5            [11]  977 	push	hl
   053F CDr00r00      [17]  978 	call	_cpct_drawSprite
   0542                     979 00104$:
   0542 DD F9         [10]  980 	ld	sp, ix
   0544 DD E1         [14]  981 	pop	ix
   0546 C9            [10]  982 	ret
                            983 ;src/util/tools.c:238: void winape_breakpoint(u16 error_code) __z88dk_callee __naked {
                            984 ;	---------------------------------
                            985 ; Function winape_breakpoint
                            986 ; ---------------------------------
   0547                     987 _winape_breakpoint::
                            988 ;src/util/tools.c:241: __asm__("pop iy");  // ret address first because __z88dk_callee convention
   0547 FD E1         [14]  989 	pop	iy
                            990 ;src/util/tools.c:242: __asm__("pop hl");
   0549 E1            [10]  991 	pop	hl
                            992 ;src/util/tools.c:243: __asm__("push iy"); // ret address last  because __z88dk_callee convention
   054A FD E5         [15]  993 	push	iy
                            994 ;src/util/tools.c:244: __asm__(".db 0xed, 0xff");
   054C ED FF               995 	.db	0xed, 0xff
                            996 ;src/util/tools.c:246: __asm__("ret");
   054E C9            [10]  997 	ret
                            998 	.area _CODE
                            999 	.area _INITIALIZER
                           1000 	.area _CABS (ABS)
